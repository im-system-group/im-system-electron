{"remainingRequest":"C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\src\\views\\Portal.vue?vue&type=template&id=2d508526&scoped=true&","dependencies":[{"path":"C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\src\\views\\Portal.vue","mtime":1594783799947},{"path":"C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\a5768\\Documents\\new_im\\im-system-fronted-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}